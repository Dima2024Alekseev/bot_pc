# handlers/screenshots.py

import logging
import os
from datetime import datetime
from telegram import Update
from telegram.ext import ContextTypes
from utils.decorators import restricted # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º restricted

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –º–æ–¥—É–ª–µ–π –¥–ª—è —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤
try:
    import pyautogui
    from PIL import Image
    SCREENSHOT_AVAILABLE = True
except ImportError:
    SCREENSHOT_AVAILABLE = False
    logging.warning("–§—É–Ω–∫—Ü–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ - –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ (pyautogui, Pillow)")

logger = logging.getLogger(__name__)

@restricted
async def screenshot(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–°–∫—Ä–∏–Ω—à–æ—Ç —ç–∫—Ä–∞–Ω–∞ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É"""
    if not SCREENSHOT_AVAILABLE:
        await update.message.reply_text(
            '‚ùå –§—É–Ω–∫—Ü–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ:\n'
            '`pip install pyautogui pillow`',
            parse_mode='Markdown'
        )
        return

    screenshot_path = None
    try:
        await update.message.reply_text('üì∏ –î–µ–ª–∞—é —Å–∫—Ä–∏–Ω—à–æ—Ç...')
        
        temp_dir = os.path.join(os.environ.get('TEMP', os.path.expanduser('~')), 'pc_bot_screenshots')
        os.makedirs(temp_dir, exist_ok=True)
        
        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
        screenshot_path = os.path.join(temp_dir, f'screen_{timestamp}.png')
        
        pyautogui.screenshot(screenshot_path)
        
        with open(screenshot_path, 'rb') as photo:
            await update.message.reply_photo(
                photo=photo,
                caption='üñ• –¢–µ–∫—É—â–∏–π —ç–∫—Ä–∞–Ω'
            )
            
    except Exception as e:
        await update.message.reply_text(f'‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞: {str(e)}')
    finally:
        if screenshot_path and os.path.exists(screenshot_path):
            try:
                os.remove(screenshot_path)
                logger.info(f"–í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ —É–¥–∞–ª–µ–Ω: {screenshot_path}")
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ {screenshot_path}: {e}")