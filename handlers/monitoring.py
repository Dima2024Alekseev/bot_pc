import logging
import psutil
import platform
import subprocess
import asyncio

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from telegram.helpers import escape_markdown

from utils.decorators import restricted

logger = logging.getLogger(__name__)

# –í–∞—à–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –±–∞—Ç–∞—Ä–µ–∏
# <--- –≠–¢–ò –°–¢–†–û–ö–ò –ë–´–õ–ò –£–î–ê–õ–ï–ù–´, –ü–û–°–ö–û–õ–¨–ö–£ –°–û–°–¢–û–Ø–ù–ò–ï –¢–ï–ü–ï–†–¨ –•–†–ê–ù–ò–¢–°–Ø –í context.bot_data
# battery_low_notified = False
# battery_full_notified = False


@restricted
async def system_status(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–∞—Ç—É—Å–µ —Å–∏—Å—Ç–µ–º—ã."""
    cpu_percent = psutil.cpu_percent(interval=1)
    virtual_memory = psutil.virtual_memory()
    disk_usage = psutil.disk_usage('/')

    status_text = (
        f"üíª *–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã:*\n"
        f"CPU: `{cpu_percent:.1f}%`\n"
        f"RAM: `{virtual_memory.percent:.1f}%` –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ "
        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ó–∞–º–µ–Ω—è–µ–º `\\))` –Ω–∞ `\\)`
        f"\\({escape_markdown(f'{virtual_memory.used / (1024**3):.1f}', version=2)} –ì–ë –∏–∑ {escape_markdown(f'{virtual_memory.total / (1024**3):.1f}', version=2)} –ì–ë\\)\n"
        f"–î–∏—Å–∫ C\\: `{disk_usage.percent:.1f}%` –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ "
        f"\\({escape_markdown(f'{disk_usage.used / (1024**3):.1f}', version=2)} –ì–ë –∏–∑ {escape_markdown(f'{disk_usage.total / (1024**3):.1f}', version=2)} –ì–ë\\)"
    )

    await update.message.reply_text(status_text, parse_mode='MarkdownV2')


@restricted
async def uptime(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã (uptime)."""
    boot_time = psutil.boot_time()
    uptime_seconds = int(psutil.time.time() - boot_time)

    # –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –≤ –¥–Ω—è—Ö, —á–∞—Å–∞—Ö, –º–∏–Ω—É—Ç–∞—Ö, —Å–µ–∫—É–Ω–¥–∞—Ö.
    minutes, seconds = divmod(uptime_seconds, 60)
    hours, minutes = divmod(minutes, 60)
    days, hours = divmod(hours, 24)

    uptime_str = f"{days} –¥–Ω–µ–π, {hours} —á–∞—Å–æ–≤, {minutes} –º–∏–Ω—É—Ç, {seconds} —Å–µ–∫—É–Ω–¥"
    await update.message.reply_text(f"‚è± *–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã:*\n`{escape_markdown(uptime_str, version=2)}`", parse_mode='MarkdownV2')


@restricted
async def list_processes(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –Ω–∞–∏–±–æ–ª–µ–µ —Ä–µ—Å—É—Ä—Å–æ–µ–º–∫–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤."""
    chat_id = update.effective_chat.id
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ-–∑–∞–ø–æ–ª–Ω–∏—Ç–µ–ª—å –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ –æ–±—ä–µ–∫—Ç.
    # –≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ –ø–æ–∑–∂–µ —Å —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏.
    sent_message = await context.bot.send_message(
        chat_id=chat_id,
        # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Ç.–∫. parse_mode='MarkdownV2' –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
        text=escape_markdown("‚è≥ –°–æ–±–∏—Ä–∞—é –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ—Ü–µ—Å—Å–∞—Ö... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—Ä–æ—Å–µ.", version=2),
        parse_mode='MarkdownV2'
    )

    try:
        # --- "–†–∞–∑–æ–≥—Ä–µ–≤–æ—á–Ω—ã–π" –≤—ã–∑–æ–≤ –¥–ª—è psutil.Process.cpu_percent() ---
        # –ü—Ä–æ—Ö–æ–¥–∏–º—Å—è –ø–æ –≤—Å–µ–º –ø—Ä–æ—Ü–µ—Å—Å–∞–º, —á—Ç–æ–±—ã psutil –º–æ–≥ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–∏ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∏.
        for p in psutil.process_iter(['pid']):
            try:
                _ = p.cpu_percent(interval=None)
            except (psutil.NoSuchProcess, psutil.AccessDenied, psutil.ZombieProcess):
                continue
        
        # –î–∞–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –ø–∞—É–∑—É.
        await asyncio.sleep(0.5) 

        # --- –¢–µ–ø–µ—Ä—å —Å–æ–±–∏—Ä–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ—Ü–µ—Å—Å–∞—Ö ---
        processes = []
        for p in psutil.process_iter(['pid', 'name', 'cpu_percent', 'memory_info']):
            try:
                if p.status() == psutil.STATUS_ZOMBIE:
                    continue
                p_info = p.info
                processes.append({
                    'pid': p_info['pid'],
                    'name': p_info['name'],
                    'cpu_percent': p_info['cpu_percent'],
                    'memory_percent': p_info['memory_info'].rss / psutil.virtual_memory().total * 100
                })
            except (psutil.NoSuchProcess, psutil.AccessDenied, psutil.ZombieProcess):
                continue

        processes.sort(key=lambda x: x['cpu_percent'] + x['memory_percent'], reverse=True)

        message_parts = []
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        message_parts.append("*–ù–∞–∏–±–æ–ª–µ–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã:*\n\n")
        
        # –ù–∞—á–∏–Ω–∞–µ–º –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω—ã–π –±–ª–æ–∫ –∫–æ–¥–∞ (` ``` `), –∫–æ—Ç–æ—Ä—ã–π –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –ø—Ä–∞–≤–∏–ª MarkdownV2 –≤–Ω—É—Ç—Ä–∏.
        # –≠—Ç–æ —Å–∞–º–æ–µ –Ω–∞–¥–µ–∂–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–∞–±–ª–∏—á–Ω—ã—Ö –∏–ª–∏ –∫–æ–¥–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö.
        message_parts.append("```\n") 
        for i, p in enumerate(processes[:10]):
            # –í–Ω—É—Ç—Ä–∏ —Ç—Ä–æ–π–Ω—ã—Ö –∫–∞–≤—ã—á–µ–∫ –Ω–∞–º –ø–æ –∏–¥–µ–µ –ù–ï –ù–£–ñ–ù–û –≤—Ä—É—á–Ω—É—é —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Ç–æ—á–∫–∏ –∏–ª–∏ –ø—Ä–æ—Ü–µ–Ω—Ç—ã.
            # –ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ –≤—Å–µ –µ—â–µ –≤–æ–∑–Ω–∏–∫–∞–ª–∞, —ç—Ç–æ –±—ã–ª–æ –∏–∑–±—ã—Ç–æ—á–Ω–æ–µ, –Ω–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ.
            # –û—Å—Ç–∞–≤–ª—è–µ–º –µ–≥–æ, —á—Ç–æ–±—ã –±—ã—Ç—å –Ω–∞ 100% —É–≤–µ—Ä–µ–Ω–Ω—ã–º–∏.
            line = (
                f"{i+1}. PID: {p['pid']}, {escape_markdown(p['name'], version=2)}, " # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –∏–º—è –ø—Ä–æ—Ü–µ—Å—Å–∞, –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
                f"CPU: {escape_markdown(f'{p['cpu_percent']:.1f}%', version=2)}, "   # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º CPU –ø—Ä–æ—Ü–µ–Ω—Ç
                f"RAM: {escape_markdown(f'{p['memory_percent']:.1f}%', version=2)}\n" # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º RAM –ø—Ä–æ—Ü–µ–Ω—Ç
            )
            message_parts.append(line)
        message_parts.append("```\n") # –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω—ã–π –±–ª–æ–∫ –∫–æ–¥–∞

        # –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –≤ –∫–æ–Ω—Ü–µ - –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞, —Ç.–∫. –Ω–µ –≤ –±–ª–æ–∫–µ –∫–æ–¥–∞.
        # –ö–≤–∞–¥—Ä–∞—Ç–Ω—ã–µ —Å–∫–æ–±–∫–∏ `[` –∏ `]` –Ω—É–∂–Ω–æ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –≤ MarkdownV2, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ —è–≤–ª—è—é—Ç—Å—è —á–∞—Å—Ç—å—é —Å—Å—ã–ª–∫–∏.
        message_parts.append("_–î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ_ `/kill_process \\[PID\\]`")

        final_message_text = "".join(message_parts)

        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ä–∞–Ω–µ–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ-–∑–∞–ø–æ–ª–Ω–∏—Ç–µ–ª—å —Å –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏.
        await sent_message.edit_text(final_message_text, parse_mode='MarkdownV2')

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤: {e}")
        # –ó–¥–µ—Å—å —Ç–∞–∫–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º escape_markdown, –ø–æ—Ç–æ–º—É —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã.
        error_message = f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤: `{escape_markdown(str(e), version=2)}`"
        # –í —Å–ª—É—á–∞–µ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏—è –æ—à–∏–±–∫–∏, –ø—ã—Ç–∞–µ–º—Å—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ-–∑–∞–ø–æ–ª–Ω–∏—Ç–µ–ª—å
        try:
            await sent_message.edit_text(error_message, parse_mode='MarkdownV2')
        except Exception as edit_error:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—à–∏–±–∫–æ–π: {edit_error}")
            await context.bot.send_message(chat_id=chat_id, text=error_message, parse_mode='MarkdownV2')


@restricted
async def check_process_running(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–ø—É—â–µ–Ω –ª–∏ –ø—Ä–æ—Ü–µ—Å—Å –ø–æ –∏–º–µ–Ω–∏."""
    if not context.args:
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∏–º—è –ø—Ä–æ—Ü–µ—Å—Å–∞: `/is_running` \\[–∏–º—è\\_–ø—Ä–æ—Ü–µ—Å—Å–∞\\]",
            parse_mode='MarkdownV2'
        )
        return

    process_name = " ".join(context.args).lower()
    found = False
    for proc in psutil.process_iter(['name']):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –∏–º—è –ø—Ä–æ—Ü–µ—Å—Å–∞ (–±–µ–∑ —É—á–µ—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞) —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∏–º—è
        if proc.info['name'] and process_name in proc.info['name'].lower():
            await update.message.reply_text(
                f"‚úÖ –ü—Ä–æ—Ü–µ—Å—Å `{escape_markdown(proc.info['name'], version=2)}` \\(PID: `{proc.pid}`\\) –∑–∞–ø—É—â–µ–Ω\\.",
                parse_mode='MarkdownV2'
            )
            found = True
            break
    if not found:
        await update.message.reply_text(
            f"‚ùå –ü—Ä–æ—Ü–µ—Å—Å `{escape_markdown(process_name, version=2)}` –Ω–µ –Ω–∞–π–¥–µ–Ω\\.",
            parse_mode='MarkdownV2'
        )


@restricted
async def kill_process_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç PID –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ."""
    if not context.args:
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ PID –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: `/kill_process` \\[PID\\]",
            parse_mode='MarkdownV2'
        )
        return

    try:
        pid_to_kill = int(context.args[0])
        process_name = ""
        try:
            p = psutil.Process(pid_to_kill)
            process_name = p.name()
        except psutil.NoSuchProcess:
            await update.message.reply_text(f"‚ùå –ü—Ä–æ—Ü–µ—Å—Å —Å PID `{pid_to_kill}` –Ω–µ –Ω–∞–π–¥–µ–Ω\\.", parse_mode='MarkdownV2')
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º PID –≤ user_data –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ inline_button_handler.
        context.user_data['kill_pid'] = pid_to_kill
        # –°–æ–∑–¥–∞–µ–º inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_kill")],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")]
        ])
        await update.message.reply_text(
            f"‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–≤–µ—Ä—à–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å `{escape_markdown(process_name, version=2)}` \\(PID: `{pid_to_kill}`\\)\\?",
            reply_markup=keyboard,
            parse_mode='MarkdownV2'
        )
    except ValueError:
        await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π PID \\(—á–∏—Å–ª–æ\\)\\.", parse_mode='MarkdownV2')
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ kill_process_command: {e}")
        await update.message.reply_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: `{escape_markdown(str(e), version=2)}`", parse_mode='MarkdownV2')

async def execute_kill_process(update: Update, context: ContextTypes.DEFAULT_TYPE, pid_to_kill: int) -> None:
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–æ PID."""
    try:
        p = psutil.Process(pid_to_kill)
        process_name = p.name()
        p.terminate() # –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å
        await update.callback_query.edit_message_text(
            f"‚úÖ –ü—Ä–æ—Ü–µ—Å—Å `{escape_markdown(process_name, version=2)}` \\(PID: `{pid_to_kill}`\\) —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω\\.",
            parse_mode='MarkdownV2'
        )
    except psutil.NoSuchProcess:
        await update.callback_query.edit_message_text(
            f"‚ùå –ü—Ä–æ—Ü–µ—Å—Å —Å PID `{pid_to_kill}` —É–∂–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç\\.",
            parse_mode='MarkdownV2'
        )
    except psutil.AccessDenied:
        await update.callback_query.edit_message_text(
            f"‚ùå –û—Ç–∫–∞–∑–∞–Ω–æ –≤ –¥–æ—Å—Ç—É–ø–µ –∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—é –ø—Ä–æ—Ü–µ—Å—Å–∞ —Å PID `{pid_to_kill}`\\. –í–æ–∑–º–æ–∂–Ω–æ, —Ç—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\\.",
            parse_mode='MarkdownV2'
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞ PID {pid_to_kill}: {e}")
        await update.callback_query.edit_message_text(
            f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≤–µ—Ä—à–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å —Å PID `{pid_to_kill}`: `{escape_markdown(str(e), version=2)}`",
            parse_mode='MarkdownV2'
        )


@restricted
async def battery_status(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –±–∞—Ç–∞—Ä–µ–∏."""
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–∞—Ç–∞—Ä–µ–µ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –Ω–∞ Windows —á–µ—Ä–µ–∑ psutil.
    if platform.system() == "Windows":
        try:
            battery = psutil.sensors_battery()
            if battery:
                status_text = f"üîã *–°–æ—Å—Ç–æ—è–Ω–∏–µ –±–∞—Ç–∞—Ä–µ–∏:*\n" \
                              f"–ó–∞—Ä—è–¥: `{battery.percent:.1f}%`\n"

                if battery.power_plugged:
                    status_text += "–°—Ç–∞—Ç—É—Å: –ó–∞—Ä—è–∂–∞–µ—Ç—Å—è ‚ö°"
                elif battery.secsleft == psutil.POWER_TIME_UNLIMITED:
                    status_text += "–°—Ç–∞—Ç—É—Å: –ü–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞—Ä—è–∂–µ–Ω ‚úÖ"
                elif battery.secsleft == psutil.POWER_TIME_UNKNOWN:
                    status_text += "–°—Ç–∞—Ç—É—Å: –û—Ç–∫–ª—é—á–µ–Ω –æ—Ç —Å–µ—Ç–∏, –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ ‚è≥"
                else:
                    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –±–∞—Ç–∞—Ä–µ–∏.
                    minutes, seconds = divmod(int(battery.secsleft), 60)
                    hours, minutes = divmod(minutes, 60)
                    time_left_str = f"{hours}—á {minutes}–º" if hours > 0 else f"{minutes}–º"
                    status_text += f"–°—Ç–∞—Ç—É—Å: –†–∞–∑—Ä—è–∂–∞–µ—Ç—Å—è, –æ—Å—Ç–∞–ª–æ—Å—å –ø—Ä–∏–º–µ—Ä–Ω–æ `{escape_markdown(time_left_str, version=2)}` üìâ"
            else:
                status_text = "‚ùå –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–∞—Ç–∞—Ä–µ–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ \\(–≤–æ–∑–º–æ–∂–Ω–æ, —ç—Ç–æ –ü–ö –±–µ–∑ –±–∞—Ç–∞—Ä–µ–∏ –∏–ª–∏ –Ω–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏\\)\\."
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–∞—Ç–∞—Ä–µ–µ: {e}")
            status_text = f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∞—Ç–∞—Ä–µ–µ: `{escape_markdown(str(e), version=2)}`"
    else:
        status_text = "‚ùå –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–∞—Ç–∞—Ä–µ–µ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è Windows\\."

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç.
    if update.message:
        await update.message.reply_text(status_text, parse_mode='MarkdownV2')
    elif update.callback_query:
        await update.callback_query.message.reply_text(status_text, parse_mode='MarkdownV2')


async def check_battery_level(context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —É—Ä–æ–≤–µ–Ω—å –∑–∞—Ä—è–¥–∞ –±–∞—Ç–∞—Ä–µ–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è."""
    # <--- –ò–ó–ú–ï–ù–ï–ù–û: –¢–µ–ø–µ—Ä—å –ø–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ context.bot_data
    # –ï—Å–ª–∏ –∏—Ö –Ω–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º False –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    battery_low_notified = context.bot_data.get('battery_low_notified', False)
    battery_full_notified = context.bot_data.get('battery_full_notified', False)

    chat_id = context.job.data['chat_id']
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç—É–∞–ª—å–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è Windows. –ï—Å–ª–∏ –û–° –Ω–µ Windows, –æ—Ç–∫–ª—é—á–∞–µ–º –∑–∞–¥–∞—á—É.
    if platform.system() != "Windows":
        if not context.user_data.get('battery_not_windows_notified', False):
            await context.bot.send_message(
                chat_id=chat_id,
                text="‚ÑπÔ∏è –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–∞—Ç–∞—Ä–µ–∏ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è Windows\\. –û—Ç–∫–ª—é—á–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏\\.",
                parse_mode='MarkdownV2'
            )
            context.user_data['battery_not_windows_notified'] = True
        context.job.schedule_removal() # –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á—É, –µ—Å–ª–∏ –û–° –Ω–µ Windows
        return

    try:
        battery = psutil.sensors_battery()
        if battery:
            current_percent = battery.percent
            power_plugged = battery.power_plugged

            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∏–∑–∫–æ–º –∑–∞—Ä—è–¥–µ
            if current_percent <= 20 and not power_plugged and not battery_low_notified:
                await context.bot.send_message(
                    chat_id=chat_id,
                    text=f"üö® *–í–Ω–∏–º–∞–Ω–∏–µ: –ù–∏–∑–∫–∏–π –∑–∞—Ä—è–¥ –±–∞—Ç–∞—Ä–µ–∏* `{current_percent:.1f}%`\\! –ü–æ–¥–∫–ª—é—á–∏—Ç–µ –∑–∞—Ä—è–¥–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ\\.",
                    parse_mode='MarkdownV2'
                )
                # <--- –ò–ó–ú–ï–ù–ï–ù–û: –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–ª–∞–≥–∏ –≤ context.bot_data
                context.bot_data['battery_low_notified'] = True
                context.bot_data['battery_full_notified'] = False # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –ø–æ–ª–Ω–æ–π –±–∞—Ç–∞—Ä–µ–∏

            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–ª–Ω–æ–º –∑–∞—Ä—è–¥–µ
            elif current_percent >= 99 and power_plugged and not battery_full_notified:
                await context.bot.send_message(
                    chat_id=chat_id,
                    text=f"‚úÖ *–ë–∞—Ç–∞—Ä–µ—è –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞—Ä—è–∂–µ–Ω–∞* `{current_percent:.1f}%`\\! –ú–æ–∂–Ω–æ –æ—Ç–∫–ª—é—á–∏—Ç—å –∑–∞—Ä—è–¥–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ\\.",
                    parse_mode='MarkdownV2'
                )
                # <--- –ò–ó–ú–ï–ù–ï–ù–û: –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–ª–∞–≥–∏ –≤ context.bot_data
                context.bot_data['battery_full_notified'] = True
                context.bot_data['battery_low_notified'] = False # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –Ω–∏–∑–∫–æ–≥–æ –∑–∞—Ä—è–¥–∞

            # –°–±—Ä–æ—Å —Ñ–ª–∞–≥–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π, –∫–æ–≥–¥–∞ —É—Å–ª–æ–≤–∏—è –ø–µ—Ä–µ—Å—Ç–∞—é—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è
            elif current_percent > 20 and battery_low_notified:
                # <--- –ò–ó–ú–ï–ù–ï–ù–û: –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –≤ context.bot_data
                context.bot_data['battery_low_notified'] = False
            elif current_percent < 99 and battery_full_notified:
                # <--- –ò–ó–ú–ï–ù–ï–ù–û: –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –≤ context.bot_data
                context.bot_data['battery_full_notified'] = False

        else:
            # –ï—Å–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–∞—Ç–∞—Ä–µ–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–∞ –¥–µ—Å–∫—Ç–æ–ø–µ –±–µ–∑ –±–∞—Ç–∞—Ä–µ–∏),
            # —É–≤–µ–¥–æ–º–ª—è–µ–º –æ–¥–∏–Ω —Ä–∞–∑ –∏ –æ—Ç–∫–ª—é—á–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É.
            if not context.user_data.get('battery_unavailable_notified', False):
                await context.bot.send_message(
                    chat_id=chat_id,
                    text="‚ùå –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–∞—Ç–∞—Ä–µ–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞\\. –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏\\.",
                    parse_mode='MarkdownV2'
                )
                context.user_data['battery_unavailable_notified'] = True
            context.job.schedule_removal() # –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á—É, –µ—Å–ª–∏ –±–∞—Ç–∞—Ä–µ—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞
            logger.warning("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–∞—Ç–∞—Ä–µ–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞.")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ –±–∞—Ç–∞—Ä–µ–∏: {e}")
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ–± –æ—à–∏–±–∫–µ –∏ –æ—Ç–∫–ª—é—á–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è –æ—à–∏–±–æ–∫.
        if not context.user_data.get('battery_check_error_notified', False):
            await context.bot.send_message(
                chat_id=chat_id,
                text=f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ –±–∞—Ç–∞—Ä–µ–∏: `{escape_markdown(str(e), version=2)}`\\. –û—Ç–∫–ª—é—á–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏\\.",
                parse_mode='MarkdownV2'
            )
            context.user_data['battery_check_error_notified'] = True
        context.job.schedule_removal() # –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á—É –ø—Ä–∏ –æ—à–∏–±–∫–µ