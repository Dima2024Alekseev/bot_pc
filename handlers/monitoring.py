import logging
import psutil
import platform
import asyncio
from datetime import datetime, timedelta
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ContextTypes
from utils.decorators import restricted
import time
from telegram.helpers import escape_markdown
from utils.state_manager import save_bot_state

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –º–æ–¥—É–ª–µ–π –¥–ª—è —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤
try:
    import pyautogui
    from PIL import Image

    SCREENSHOT_AVAILABLE = True
except ImportError:
    SCREENSHOT_AVAILABLE = False
    logging.warning(
        "–§—É–Ω–∫—Ü–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ - –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ (pyautogui, Pillow)"
    )

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –º–æ–¥—É–ª–µ–π –¥–ª—è –±–∞—Ç–∞—Ä–µ–∏
try:
    import psutil

    BATTERY_AVAILABLE = True
except ImportError:
    BATTERY_AVAILABLE = False
    logging.warning(
        "–§—É–Ω–∫—Ü–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –±–∞—Ç–∞—Ä–µ–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ - –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å (psutil)"
    )


logger = logging.getLogger(__name__)


@restricted
async def system_status(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–∞—Ç—É—Å–µ —Å–∏—Å—Ç–µ–º—ã."""
    cpu_percent = psutil.cpu_percent(interval=1)
    virtual_memory = psutil.virtual_memory()
    disk_usage = psutil.disk_usage("/")

    status_text = (
        f"üíª *–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã:*\n"
        f"CPU: `{cpu_percent:.1f}%`\n"
        f"RAM: `{virtual_memory.percent:.1f}%` –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ "
        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ó–∞–º–µ–Ω—è–µ–º `\\))` –Ω–∞ `\\)`
        f"\\({escape_markdown(f'{virtual_memory.used / (1024**3):.1f}', version=2)} –ì–ë –∏–∑ {escape_markdown(f'{virtual_memory.total / (1024**3):.1f}', version=2)} –ì–ë\\)\n"
        f"–î–∏—Å–∫ C\\: `{disk_usage.percent:.1f}%` –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ "
        f"\\({escape_markdown(f'{disk_usage.used / (1024**3):.1f}', version=2)} –ì–ë –∏–∑ {escape_markdown(f'{disk_usage.total / (1024**3):.1f}', version=2)} –ì–ë\\)"
    )

    await update.message.reply_text(status_text, parse_mode="MarkdownV2")


@restricted
async def uptime(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–í—ã–≤–æ–¥–∏—Ç –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã."""
    try:
        boot_time_timestamp = psutil.boot_time()
        boot_time = datetime.fromtimestamp(boot_time_timestamp)
        current_time = datetime.now()
        uptime_delta = current_time - boot_time

        days = uptime_delta.days
        hours, remainder = divmod(uptime_delta.seconds, 3600)
        minutes, seconds = divmod(remainder, 60)

        uptime_message = (
            f"‚è± *–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã:*\n"
            f"  `{days}` –¥–Ω–µ–π, `{hours:02}`:{minutes:02}:{seconds:02}"
        )
        await update.message.reply_text(uptime_message, parse_mode="MarkdownV2")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞–±–æ—Ç—ã: {e}")
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞–±–æ—Ç—ã: {e}")


@restricted
async def list_processes(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –Ω–∞–∏–±–æ–ª–µ–µ —Ä–µ—Å—É—Ä—Å–æ–µ–º–∫–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤."""
    chat_id = update.effective_chat.id

    sent_message = await context.bot.send_message(
        chat_id=chat_id,
        text=escape_markdown(
            "‚è≥ –°–æ–±–∏—Ä–∞—é –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ—Ü–µ—Å—Å–∞—Ö... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—Ä–æ—Å–µ.",
            version=2,
        ),
        parse_mode="MarkdownV2",
    )

    try:
        for p in psutil.process_iter(["pid"]):
            try:
                _ = p.cpu_percent(interval=None)
            except (psutil.NoSuchProcess, psutil.AccessDenied, psutil.ZombieProcess):
                continue

        await asyncio.sleep(0.5)

        processes = []
        for p in psutil.process_iter(["pid", "name", "cpu_percent", "memory_info"]):
            try:
                if p.status() == psutil.STATUS_ZOMBIE:
                    continue
                p_info = p.info
                processes.append(
                    {
                        "pid": p_info["pid"],
                        "name": p_info["name"],
                        "cpu_percent": p_info["cpu_percent"],
                        "memory_percent": p_info["memory_info"].rss
                        / psutil.virtual_memory().total
                        * 100,
                    }
                )
            except (psutil.NoSuchProcess, psutil.AccessDenied, psutil.ZombieProcess):
                continue

        processes.sort(
            key=lambda x: x["cpu_percent"] + x["memory_percent"], reverse=True
        )

        message_parts = []
        message_parts.append("*–ù–∞–∏–±–æ–ª–µ–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã:*\n\n")

        message_parts.append("```\n")
        for i, p in enumerate(processes[:10]):
            line = (
                f"{i+1}. PID: {p['pid']}, {escape_markdown(p['name'], version=2)}, "  # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –∏–º—è –ø—Ä–æ—Ü–µ—Å—Å–∞, –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
                f"CPU: {escape_markdown(f'{p['cpu_percent']:.1f}%', version=2)}, "  # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º CPU –ø—Ä–æ—Ü–µ–Ω—Ç
                f"RAM: {escape_markdown(f'{p['memory_percent']:.1f}%', version=2)}\n"  # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º RAM –ø—Ä–æ—Ü–µ–Ω—Ç
            )
            message_parts.append(line)
        message_parts.append("```\n")

        message_parts.append(
            "_–î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ_ `/kill_process \\[PID\\]`"
        )

        final_message_text = "".join(message_parts)

        await sent_message.edit_text(final_message_text, parse_mode="MarkdownV2")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤: {e}")
        error_message = f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤: `{escape_markdown(str(e), version=2)}`"
        try:
            await sent_message.edit_text(error_message, parse_mode="MarkdownV2")
        except Exception as edit_error:
            logger.error(
                f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—à–∏–±–∫–æ–π: {edit_error}"
            )
            await context.bot.send_message(
                chat_id=chat_id, text=error_message, parse_mode="MarkdownV2"
            )


@restricted
async def check_process_running(
    update: Update, context: ContextTypes.DEFAULT_TYPE
) -> None:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–ø—É—â–µ–Ω –ª–∏ –ø—Ä–æ—Ü–µ—Å—Å –ø–æ –∏–º–µ–Ω–∏."""
    if not context.args:
        await update.message.reply_text(
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `/is_running <–∏–º—è_–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è>`", parse_mode="MarkdownV2"
        )
        return

    process_name = " ".join(context.args).lower()
    found = False
    for p in psutil.process_iter(["name"]):
        if process_name in p.info["name"].lower():
            await update.message.reply_text(
                f"‚úÖ –ü—Ä–æ—Ü–µ—Å—Å `{p.info['name']}` \\(PID: `{p.pid}`\\) *–∑–∞–ø—É—â–µ–Ω*\\.",
                parse_mode="MarkdownV2",
            )
            found = True
            break
    if not found:
        await update.message.reply_text(
            f"‚ùå –ü—Ä–æ—Ü–µ—Å—Å `{process_name}` *–Ω–µ –Ω–∞–π–¥–µ–Ω*\\.", parse_mode="MarkdownV2"
        )


@restricted
async def kill_process_command(
    update: Update, context: ContextTypes.DEFAULT_TYPE
) -> None:
    """–ó–∞–≤–µ—Ä—à–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –ø–æ PID —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º."""
    if not context.args:
        await update.message.reply_text(
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `/kill_process <PID>`", parse_mode="MarkdownV2"
        )
        return

    try:
        pid = int(context.args[0])
        context.user_data["kill_pid"] = pid

        try:
            process = psutil.Process(pid)
            process_info = f"–ü—Ä–æ—Ü–µ—Å—Å: `{process.name()}` \\(PID: `{pid}`\\)"
        except psutil.NoSuchProcess:
            process_info = f"PID: `{pid}` (–ü—Ä–æ—Ü–µ—Å—Å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω)"

        reply_markup = InlineKeyboardMarkup(
            [
                [InlineKeyboardButton("‚úÖ –î–∞", callback_data="confirm_kill")],
                [InlineKeyboardButton("‚ùå –ù–µ—Ç", callback_data="cancel")],
            ]
        )
        await update.message.reply_text(
            f"‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–≤–µ—Ä—à–∏—Ç—å {process_info}?",
            reply_markup=reply_markup,
            parse_mode="MarkdownV2",
        )

    except ValueError:
        await update.message.reply_text(
            "‚ùå PID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º\\.", parse_mode="MarkdownV2"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞: {e}")
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")


async def execute_kill_process(
    update: Update, context: ContextTypes.DEFAULT_TYPE, pid: int
) -> None:
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è."""
    try:
        process = psutil.Process(pid)
        process_name = process.name()
        process.terminate()
        process.wait(timeout=3)

        if process.is_running():
            process.kill()
            await update.callback_query.edit_message_text(
                f"‚ò†Ô∏è –ü—Ä–æ—Ü–µ—Å—Å `{process_name}` \\(PID: `{pid}`\\) *–±—ã–ª –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω*\\.",
                parse_mode="MarkdownV2",
            )
            logger.info(f"–ü—Ä–æ—Ü–µ—Å—Å {process_name} (PID: {pid}) –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω.")
        else:
            await update.callback_query.edit_message_text(
                f"‚úÖ –ü—Ä–æ—Ü–µ—Å—Å `{process_name}` \\(PID: `{pid}`\\) *—É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω*\\.",
                parse_mode="MarkdownV2",
            )
            logger.info(f"–ü—Ä–æ—Ü–µ—Å—Å {process_name} (PID: {pid}) —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω.")

    except psutil.NoSuchProcess:
        await update.callback_query.edit_message_text(
            f"‚ùå –ü—Ä–æ—Ü–µ—Å—Å —Å PID `{pid}` *–Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω*\\.",
            parse_mode="MarkdownV2",
        )
        logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–∏—Ç—å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø—Ä–æ—Ü–µ—Å—Å PID: {pid}")
    except psutil.AccessDenied:
        await update.callback_query.edit_message_text(
            f"‚ùå –û—Ç–∫–∞–∑–∞–Ω–æ –≤ –¥–æ—Å—Ç—É–ø–µ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞ —Å PID `{pid}`\\.",
            parse_mode="MarkdownV2",
        )
        logger.error(f"–û—Ç–∫–∞–∑–∞–Ω–æ –≤ –¥–æ—Å—Ç—É–ø–µ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞ PID: {pid}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞ PID {pid}: {e}")
        await update.callback_query.edit_message_text(
            f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞ `{pid}`: {escape_markdown(str(e), version=2)}",
            parse_mode="MarkdownV2",
        )


@restricted
async def battery_status(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –±–∞—Ç–∞—Ä–µ–∏."""
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–∞—Ç–∞—Ä–µ–µ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –Ω–∞ Windows —á–µ—Ä–µ–∑ psutil.
    if platform.system() == "Windows":
        try:
            battery = psutil.sensors_battery()
            if battery:
                status_text = (
                    f"üîã *–°–æ—Å—Ç–æ—è–Ω–∏–µ –±–∞—Ç–∞—Ä–µ–∏:*\n" f"–ó–∞—Ä—è–¥: `{battery.percent:.1f}%`\n"
                )

                if battery.power_plugged:
                    status_text += "–°—Ç–∞—Ç—É—Å: –ó–∞—Ä—è–∂–∞–µ—Ç—Å—è ‚ö°"
                elif battery.secsleft == psutil.POWER_TIME_UNLIMITED:
                    status_text += "–°—Ç–∞—Ç—É—Å: –ü–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞—Ä—è–∂–µ–Ω ‚úÖ"
                elif battery.secsleft == psutil.POWER_TIME_UNKNOWN:
                    status_text += (
                        "–°—Ç–∞—Ç—É—Å: –û—Ç–∫–ª—é—á–µ–Ω –æ—Ç —Å–µ—Ç–∏, –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ ‚è≥"
                    )
                else:
                    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –±–∞—Ç–∞—Ä–µ–∏.
                    minutes, seconds = divmod(int(battery.secsleft), 60)
                    hours, minutes = divmod(minutes, 60)
                    time_left_str = (
                        f"{hours}—á {minutes}–º" if hours > 0 else f"{minutes}–º"
                    )
                    status_text += f"–°—Ç–∞—Ç—É—Å: –†–∞–∑—Ä—è–∂–∞–µ—Ç—Å—è, –æ—Å—Ç–∞–ª–æ—Å—å –ø—Ä–∏–º–µ—Ä–Ω–æ `{escape_markdown(time_left_str, version=2)}` üìâ"
            else:
                status_text = "‚ùå –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–∞—Ç–∞—Ä–µ–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ \\(–≤–æ–∑–º–æ–∂–Ω–æ, —ç—Ç–æ –ü–ö –±–µ–∑ –±–∞—Ç–∞—Ä–µ–∏ –∏–ª–∏ –Ω–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏\\)\\."
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–∞—Ç–∞—Ä–µ–µ: {e}")
            status_text = f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∞—Ç–∞—Ä–µ–µ: `{escape_markdown(str(e), version=2)}`"
    else:
        status_text = "‚ùå –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–∞—Ç–∞—Ä–µ–µ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è Windows\\."

    if update.message:
        await update.message.reply_text(status_text, parse_mode="MarkdownV2")
    elif update.callback_query:
        await update.callback_query.message.reply_text(
            status_text, parse_mode="MarkdownV2"
        )


async def check_battery_level(context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —É—Ä–æ–≤–Ω—è –∑–∞—Ä—è–¥–∞ –±–∞—Ç–∞—Ä–µ–∏.
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏ –Ω–∏–∑–∫–æ–º –∑–∞—Ä—è–¥–µ, –ø–æ–ª–Ω–æ–º –∑–∞—Ä—è–¥–µ –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏.
    –§–ª–∞–≥–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Ç–µ–ø–µ—Ä—å —Ö—Ä–∞–Ω—è—Ç—Å—è –≤ context.bot_data.
    """
    chat_id = context.job.data["chat_id"]

    if "battery_low_notified" not in context.bot_data:
        context.bot_data["battery_low_notified"] = False
    if "battery_full_notified" not in context.bot_data:
        context.bot_data["battery_full_notified"] = False
    if "battery_unavailable_notified" not in context.bot_data:
        context.bot_data["battery_unavailable_notified"] = False
    if "battery_check_error_notified" not in context.bot_data:
        context.bot_data["battery_check_error_notified"] = False

    try:
        if not BATTERY_AVAILABLE:
            if not context.bot_data["battery_unavailable_notified"]:
                await context.bot.send_message(
                    chat_id=chat_id,
                    text="‚ùå –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –±–∞—Ç–∞—Ä–µ–∏: –º–æ–¥—É–ª—å `psutil` –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.",
                )
                context.bot_data["battery_unavailable_notified"] = True
                save_bot_state(context.bot_data)
            return

        battery = psutil.sensors_battery()

        if battery is None:
            if not context.bot_data["battery_unavailable_notified"]:
                await context.bot.send_message(
                    chat_id=chat_id,
                    text="‚ÑπÔ∏è –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –±–∞—Ç–∞—Ä–µ–∏: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–∞—Ç–∞—Ä–µ–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. (–ù–∞—Å—Ç–æ–ª—å–Ω—ã–π –ü–ö?)",
                )
                context.bot_data["battery_unavailable_notified"] = True
                context.bot_data["battery_check_error_notified"] = False
                save_bot_state(context.bot_data)
            return

        context.bot_data["battery_unavailable_notified"] = False
        context.bot_data["battery_check_error_notified"] = False

        if (
            battery.percent < 20
            and not battery.power_plugged
            and not context.bot_data["battery_low_notified"]
        ):
            await context.bot.send_message(
                chat_id=chat_id,
                text=f"‚ö†Ô∏è *–í–Ω–∏–º–∞–Ω–∏–µ!* –ù–∏–∑–∫–∏–π –∑–∞—Ä—è–¥ –±–∞—Ç–∞—Ä–µ–∏: `{battery.percent:.1f}%`\\. –ü–æ–¥–∫–ª—é—á–∏—Ç–µ –∑–∞—Ä—è–¥–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ\\.",
                parse_mode="MarkdownV2",
            )
            context.bot_data["battery_low_notified"] = True
            context.bot_data["battery_full_notified"] = False
            save_bot_state(context.bot_data)
            logger.info(
                f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∏–∑–∫–æ–º –∑–∞—Ä—è–¥–µ –±–∞—Ç–∞—Ä–µ–∏: {battery.percent}%"
            )
        elif battery.percent >= 25 and context.bot_data["battery_low_notified"]:
            context.bot_data["battery_low_notified"] = False
            save_bot_state(context.bot_data)

        if (
            battery.percent > 95
            and battery.power_plugged
            and not context.bot_data["battery_full_notified"]
        ):
            await context.bot.send_message(
                chat_id=chat_id,
                text=f"‚úÖ –ë–∞—Ç–∞—Ä–µ—è –∑–∞—Ä—è–∂–µ–Ω–∞ –¥–æ `{battery.percent:.1f}%`\\. –ú–æ–∂–Ω–æ –æ—Ç–∫–ª—é—á–∏—Ç—å –∑–∞—Ä—è–¥–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ\\.",
                parse_mode="MarkdownV2",
            )
            context.bot_data["battery_full_notified"] = True
            context.bot_data["battery_low_notified"] = False
            save_bot_state(context.bot_data)
            logger.info(
                f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–ª–Ω–æ–º –∑–∞—Ä—è–¥–µ –±–∞—Ç–∞—Ä–µ–∏: {battery.percent}%"
            )
        elif battery.percent < 90 and context.bot_data["battery_full_notified"]:
            context.bot_data["battery_full_notified"] = False
            save_bot_state(context.bot_data)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ –±–∞—Ç–∞—Ä–µ–∏: {e}")
        if not context.bot_data["battery_check_error_notified"]:
            await context.bot.send_message(
                chat_id=chat_id,
                text=f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ –±–∞—Ç–∞—Ä–µ–∏: {e}",
            )
            context.bot_data["battery_check_error_notified"] = True
            save_bot_state(context.bot_data)
        context.bot_data["battery_low_notified"] = False
        context.bot_data["battery_full_notified"] = False
        context.bot_data["battery_unavailable_notified"] = False
