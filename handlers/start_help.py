import logging
import subprocess
import platform
import os
from datetime import datetime, timedelta

from telegram import (
    Update,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    ReplyKeyboardMarkup,
    KeyboardButton
)
from telegram.ext import ContextTypes, filters
from telegram.helpers import escape_markdown

from keyboards import (
    get_main_keyboard,
    get_monitoring_keyboard,
    get_control_keyboard,
    get_security_keyboard,
    get_confirmation_keyboard,
    get_shutdown_timer_keyboard
)
from utils.decorators import restricted

import handlers.pc_control as pc_control
import handlers.monitoring as monitoring
import handlers.screenshots as screenshots
import handlers.cleanup as cleanup

logger = logging.getLogger(__name__)

# –í–∞—à –ø–æ–ª—É—á–µ–Ω–Ω—ã–π file_id –∞–Ω–∏–º–∞—Ü–∏–∏
ANIMATION_FILE_ID = "CgACAgIAAxkBAAIHzWiEpBDgtAJsQDpT6lPIN4lJVF6QAAI1dgACmrkpSF3sGXuJUNm4NgQ"

@restricted
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start: –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç GIF –ø–æ file_id –∏ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
    user = update.effective_user
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} {user.full_name} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –∫–æ–º–∞–Ω–¥—É /start")

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    reply_markup = get_main_keyboard()

    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é, –∏—Å–ø–æ–ª—å–∑—É—è file_id
        await update.message.reply_animation(
            animation=ANIMATION_FILE_ID, # –ò—Å–ø–æ–ª—å–∑—É–µ–º file_id –≤–º–µ—Å—Ç–æ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞
            caption="–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, *–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä*\\! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:",
            parse_mode='MarkdownV2',
            reply_markup=reply_markup # –ü—Ä–∏–∫—Ä–µ–ø–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –∫ —Å–æ–æ–±—â–µ–Ω–∏—é —Å GIF
        )
        logger.info(f"GIF-–∞–Ω–∏–º–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø–æ file_id: {ANIMATION_FILE_ID}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ GIF-–∞–Ω–∏–º–∞—Ü–∏–∏ –ø–æ file_id {ANIMATION_FILE_ID}: {e}", exc_info=True)
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º escape_markdown –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –æ—à–∏–±–∫–∏
        await update.message.reply_text(
            f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ GIF-–∞–Ω–∏–º–∞—Ü–∏–∏: {escape_markdown(str(e), version=2)}. –û—Ç–ø—Ä–∞–≤–ª—è—é —Ç–æ–ª—å–∫–æ –∫–Ω–æ–ø–∫–∏.",
            reply_markup=reply_markup,
            parse_mode='MarkdownV2'
        )

@restricted
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    help_text = (
        "üìã *–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º*\n\n"
        "üîå *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∏—Ç–∞–Ω–∏–µ–º:*\n"
        "\\- –í—ã–∫–ª—é—á–µ–Ω–∏–µ: `/shutdown_now` –∏–ª–∏ –∫–Ω–æ–ø–∫–∞ üîå\n"
        "\\- –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞: `/reboot` –∏–ª–∏ –∫–Ω–æ–ø–∫–∞ üîÑ\n"
        "\\- –¢–∞–π–º–µ—Ä: `/shutdown_timer` \\[–≤—Ä–µ–º—è\\] –∏–ª–∏ –∫–Ω–æ–ø–∫–∞ ‚è∞\n\n"
        "üìä *–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥:*\n"
        "\\- –°—Ç–∞—Ç—É—Å: `/status` –∏–ª–∏ –∫–Ω–æ–ø–∫–∞ üìä\n"
        "\\- –ü—Ä–æ—Ü–µ—Å—Å—ã: `/processes` –∏–ª–∏ –∫–Ω–æ–ø–∫–∞ üìã\n"
        "\\- –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: `/uptime` –∏–ª–∏ –∫–Ω–æ–ø–∫–∞ ‚è±\n"
        "\\- –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞–ø—É—Å–∫: `/is_running` \\[–∏–º—è\\_–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è\\]\n"
        "\\- –ë–∞—Ç–∞—Ä–µ—è: `/battery` –∏–ª–∏ –∫–Ω–æ–ø–∫–∞ üîã\n"
        "\\- –ê–≤—Ç–æ\\-–º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –±–∞—Ç–∞—Ä–µ–∏: `/toggle_battery_monitoring`\n\n"
        "üîê *–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:*\n"
        "\\- –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞: `/lock` –∏–ª–∏ –∫–Ω–æ–ø–∫–∞ üîí\n\n"
        "üì∑ *–°–∫—Ä–∏–Ω—à–æ—Ç:*\n"
        "\\- `/screenshot` –∏–ª–∏ –∫–Ω–æ–ø–∫–∞ üì∑\n\n"
        "üßπ *–û—á–∏—Å—Ç–∫–∞:*\n"
        "\\- `/clear_temp` –∏–ª–∏ –∫–Ω–æ–ø–∫–∞ üßπ\n\n"
        "‚ùå *–û—Ç–º–µ–Ω–∞:*\n"
        "\\- `/cancel` \\- –æ—Ç–º–µ–Ω–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –≤—ã–∫–ª—é—á–µ–Ω–∏—è"
    )
    await update.message.reply_text(
        help_text,
        reply_markup=get_main_keyboard(),
        parse_mode='MarkdownV2'
    )

@restricted
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∫–Ω–æ–ø–æ–∫"""
    query = update.message.text

    if query == "üñ• –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥":
        await update.message.reply_text(
            "üìä *–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∏—Å—Ç–µ–º—ã*",
            reply_markup=get_monitoring_keyboard(),
            parse_mode='MarkdownV2'
        )
    elif query == "‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ":
        await update.message.reply_text(
            "‚öôÔ∏è *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–º*",
            reply_markup=get_control_keyboard(),
            parse_mode='MarkdownV2'
        )
    elif query == "üîê –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å":
        await update.message.reply_text(
            "üîê *–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å*",
            reply_markup=get_security_keyboard(),
            parse_mode='MarkdownV2'
        )
    elif query == "üì∑ –°–∫—Ä–∏–Ω—à–æ—Ç":
        await screenshots.screenshot(update, context)
    elif query == "‚ùì –ü–æ–º–æ—â—å":
        await help_command(update, context)
    elif query == "üìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã":
        await monitoring.system_status(update, context)
    elif query == "‚è± –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã":
        await monitoring.uptime(update, context)
    elif query == "üìã –°–ø–∏—Å–æ–∫ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤":
        await monitoring.list_processes(update, context)
    elif query == "üîã –ë–∞—Ç–∞—Ä–µ—è":
        await monitoring.battery_status(update, context)
    elif query == "üîå –í—ã–∫–ª—é—á–∏—Ç—å":
        await update.message.reply_text(
            "‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–∫–ª—é—á–∏—Ç—å –∫–æ–º–ø—å—é—Ç–µ—Ä?",
            reply_markup=get_confirmation_keyboard("shutdown")
        )
    elif query == "üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å":
        await update.message.reply_text(
            "‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–º–ø—å—é—Ç–µ—Ä?",
            reply_markup=get_confirmation_keyboard("reboot")
        )
    elif query == "‚è∞ –¢–∞–π–º–µ—Ä –≤—ã–∫–ª—é—á–µ–Ω–∏—è":
        await update.message.reply_text(
            "‚è∞ –í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –¥–æ –≤—ã–∫–ª—é—á–µ–Ω–∏—è:",
            reply_markup=get_shutdown_timer_keyboard()
        )
    elif query == "‚ùå –û—Ç–º–µ–Ω–∞ –≤—ã–∫–ª—é—á–µ–Ω–∏—è":
        await pc_control.cancel_shutdown(update, context)
    elif query == "üßπ –û—á–∏—Å—Ç–∏—Ç—å –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã":
        await cleanup.clear_all_temp_files(update, context)
    elif query == "üîí –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ü–ö":
        await update.message.reply_text(
            "‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –∫–æ–º–ø—å—é—Ç–µ—Ä?",
            reply_markup=get_confirmation_keyboard("lock")
        )
    elif query == "üîô –ù–∞–∑–∞–¥":
        await start(update, context)

@restricted
async def inline_button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫"""
    query = update.callback_query
    chat_id = query.message.chat_id
    await query.answer()

    data = query.data

    if data.startswith("timer_"):
        minutes = int(query.data.split("_")[1])
        context.user_data['shutdown_minutes'] = minutes
        await query.edit_message_text(
            f"‚è≥ –ö–æ–º–ø—å—é—Ç–µ—Ä –≤—ã–∫–ª—é—á–∏—Ç—Å—è —á–µ—Ä–µ–∑ {minutes} –º–∏–Ω—É—Ç\\. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ:",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_timer")],
                [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")]
            ]),
            parse_mode='MarkdownV2'
        )
    elif data == "confirm_timer":
        minutes = context.user_data.get('shutdown_minutes', 30)
        seconds = minutes * 60

        if 'shutdown_timer' in context.user_data and context.user_data['shutdown_timer'] is not None:
            try:
                if hasattr(context.user_data['shutdown_timer'], 'job'):
                    context.user_data['shutdown_timer'].job.schedule_removal()
                else:
                    context.user_data['shutdown_timer'].schedule_removal()
                logger.info("–ü—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–∞–π–º–µ—Ä –≤—ã–∫–ª—é—á–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω –ø–µ—Ä–µ–¥ —É—Å—Ç–∞–Ω–æ–≤–∫–æ–π –Ω–æ–≤–æ–≥–æ.")
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–∞–π–º–µ—Ä: {e}")
            del context.user_data['shutdown_timer']

        job_data = {
            'chat_id': update.effective_chat.id,
            'message_id': query.message.message_id
        }
       
        context.user_data['shutdown_timer'] = context.job_queue.run_once(
            pc_control.shutdown_pc,
            seconds,
            name="shutdown_timer",
            data=job_data
        )

        shutdown_time = (datetime.now() + timedelta(minutes=minutes)).strftime('%H:%M')
        await query.edit_message_text(
            f"‚è∞ –í—ã–∫–ª—é—á–µ–Ω–∏–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞ {shutdown_time} \\(—á–µ—Ä–µ–∑ {minutes} –º–∏–Ω—É—Ç\\)",
            parse_mode='MarkdownV2'
        )
    elif data.startswith("confirm_"):
        action = query.data.split("_")[1]
        if action == "shutdown":
            await pc_control.shutdown_now(update, context)
        elif action == "reboot":
            await pc_control.reboot(update, context)
        elif action == "lock":
            await pc_control.lock_pc(update, context)
        elif action == "kill":
            pid = context.user_data.get('kill_pid')
            if pid:
                await monitoring.execute_kill_process(update, context, pid)
                del context.user_data['kill_pid']
            else:
                await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: PID –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω\\.", parse_mode='MarkdownV2')
        elif action == "clear_temp":
            await cleanup.clear_all_temp_files(update, context)
    elif data == "cancel":
        await query.edit_message_text("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
        if 'shutdown_timer' in context.user_data and context.user_data['shutdown_timer'] is not None:
            try:
                if hasattr(context.user_data['shutdown_timer'], 'job'):
                    context.user_data['shutdown_timer'].job.schedule_removal()
                else:
                    context.user_data['shutdown_timer'].schedule_removal()
                del context.user_data['shutdown_timer']
                if platform.system() == "Windows":
                    subprocess.run(["shutdown", "/a"], check=False)
                await query.message.reply_text('‚úÖ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –≤—ã–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ')
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ —Ç–∞–π–º–µ—Ä–∞: {e}")
                await query.message.reply_text(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—Ç–º–µ–Ω–∏—Ç—å —Ç–∞–π–º–µ—Ä: {escape_markdown(str(e), version=2)}")
        else:
            await query.message.reply_text('‚ÑπÔ∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–∞–π–º–µ—Ä–æ–≤ –≤—ã–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è –æ—Ç–º–µ–Ω—ã\\.', parse_mode='MarkdownV2')
    else:
        await query.message.reply_text('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ. –í–æ–∑–≤—Ä–∞—â–∞—é—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.', reply_markup=get_main_keyboard())