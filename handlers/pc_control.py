# handlers/pc_control.py

import logging
import subprocess
import platform
import asyncio
import re
from datetime import datetime, timedelta
from telegram import Update
from telegram.ext import ContextTypes
from utils.decorators import restricted  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º restricted

# from keyboards import get_confirmation_keyboard # –ó–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ, —Ç–∞–∫ –∫–∞–∫ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ —ç—Ç–æ–º —Ñ—Ä–∞–≥–º–µ–Ω—Ç–µ

logger = logging.getLogger(__name__)

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –≤—ã–∫–ª—é—á–µ–Ω–∏—è—Ö (–∏—Å–ø–æ–ª—å–∑—É–µ–º context.user_data)

@restricted
async def shutdown_now(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ–µ –≤—ã–∫–ª—é—á–µ–Ω–∏–µ"""
    try:
        message_to_edit = None
        if hasattr(update, 'callback_query') and update.callback_query.message:
            message_to_edit = update.callback_query.message
        elif update.message:
            message_to_edit = update.message

        if message_to_edit:
            await message_to_edit.reply_text('üîÑ –í—ã–∫–ª—é—á–∞—é –∫–æ–º–ø—å—é—Ç–µ—Ä...')
        else:
            logger.error("–ù–µ—Ç –æ–±—ä–µ–∫—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞.")

        if platform.system() == "Windows":
            subprocess.run(["shutdown", "/s", "/t", "0"])
        else:
            subprocess.run(["shutdown", "-h", "now"])
    except Exception as e:
        error_msg = f'‚ùå –û—à–∏–±–∫–∞: {e}'
        if message_to_edit:
            await message_to_edit.reply_text(error_msg)
        else:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∫–ª—é—á–µ–Ω–∏–∏, –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")

@restricted
async def reboot(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞"""
    try:
        message_to_edit = None
        if hasattr(update, 'callback_query') and update.callback_query.message:
            message_to_edit = update.callback_query.message
        elif update.message:
            message_to_edit = update.message

        if message_to_edit:
            await message_to_edit.reply_text('üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞—é –∫–æ–º–ø—å—é—Ç–µ—Ä...')
        else:
            logger.error("–ù–µ—Ç –æ–±—ä–µ–∫—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞.")

        if platform.system() == "Windows":
            subprocess.run(["shutdown", "/r", "/t", "0"])
        else:
            subprocess.run(["reboot"])
    except Exception as e:
        error_msg = f'‚ùå –û—à–∏–±–∫–∞: {e}'
        if message_to_edit:
            await message_to_edit.reply_text(error_msg)
        else:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")

@restricted
async def lock_pc(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —Ä–∞–±–æ—á–µ–≥–æ —Å—Ç–æ–ª–∞"""
    try:
        message_to_edit = None
        if hasattr(update, 'callback_query') and update.callback_query.message:
            message_to_edit = update.callback_query.message
        elif update.message:
            message_to_edit = update.message

        if message_to_edit:
            await message_to_edit.reply_text('üîí –ë–ª–æ–∫–∏—Ä—É—é –∫–æ–º–ø—å—é—Ç–µ—Ä...')
        else:
            logger.error("–ù–µ—Ç –æ–±—ä–µ–∫—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞.")

        if platform.system() == "Windows":
            subprocess.run(["rundll32.exe", "user32.dll,LockWorkStation"])
        elif platform.system() == "Linux":
            try:
                subprocess.run(["loginctl", "lock-session"], check=True)
            except subprocess.CalledProcessError:
                subprocess.run(["gnome-screensaver-command", "-l"], check=True)
        else:
            error_msg = '‚ùå –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –Ω–∞ —ç—Ç–æ–π —Å–∏—Å—Ç–µ–º–µ'
            if message_to_edit:
                await message_to_edit.reply_text(error_msg)
            else:
                logger.warning(f"–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è: {platform.system()}")
            return
       
        if message_to_edit:
            await message_to_edit.reply_text('‚úÖ –ö–æ–º–ø—å—é—Ç–µ—Ä –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.')

    except FileNotFoundError:
        error_msg = '‚ùå –ö–æ–º–∞–Ω–¥–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–∫—Ä–∏–Ω—Å–µ–π–≤–µ—Ä —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω.'
        if message_to_edit:
            await message_to_edit.reply_text(error_msg)
    except Exception as e:
        error_msg = f'‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ: {e}'
        if message_to_edit:
            await message_to_edit.reply_text(error_msg)

@restricted
async def shutdown_timer(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–í—ã–∫–ª—é—á–µ–Ω–∏–µ –ø–æ —Ç–∞–π–º–µ—Ä—É"""
    if not context.args:
        await update.message.reply_text(
            '‚è±Ô∏è –£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è:\n'
            '–ù–∞–ø—Ä–∏–º–µ—Ä:\n'
            '/shutdown_timer 60 - —á–µ—Ä–µ–∑ 60 –º–∏–Ω—É—Ç\n'
            f'/shutdown_timer {datetime.now().strftime("%H:%M")} - –Ω–∞–ø—Ä–∏–º–µ—Ä, –≤ {datetime.now().strftime("%H:%M")} (–ø–æ —Ç–µ–∫—É—â–µ–º—É –≤—Ä–µ–º–µ–Ω–∏)'
        )
        return

    time_arg = ' '.join(context.args).strip()
   
    try:
        seconds = 0
        if ':' in time_arg:
            if not re.fullmatch(r'^(0?[0-9]|1[0-9]|2[0-3]):[0-5][0-9]$', time_arg):
                raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ HH:MM.")

            now = datetime.now()
            shutdown_time_target = datetime.strptime(time_arg, '%H:%M').replace(
                year=now.year, month=now.month, day=now.day, second=0, microsecond=0
            )

            if shutdown_time_target <= now:
                shutdown_time_target += timedelta(days=1)

            seconds = (shutdown_time_target - now).total_seconds()
        else:
            minutes = int(time_arg)
            if minutes <= 0:
                raise ValueError("–í—Ä–µ–º—è –≤ –º–∏–Ω—É—Ç–∞—Ö –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.")
            seconds = minutes * 60

        if seconds <= 0:
            await update.message.reply_text('‚è≥ –í—Ä–µ–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º!')
            return

        if 'shutdown_timer' in context.user_data and context.user_data['shutdown_timer'] is not None:
            try:
                # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–º–µ–Ω—ã Job
                context.user_data['shutdown_timer'].remove()
                logger.info("–ü—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–∞–π–º–µ—Ä –≤—ã–∫–ª—é—á–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω.")
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–∞–π–º–µ—Ä: {e}")
            del context.user_data['shutdown_timer']

        job_data = {
            'chat_id': update.effective_chat.id,
            'message_id': update.message.message_id
        }

        context.user_data['shutdown_timer'] = context.job_queue.run_once(
            shutdown_pc,  # –ó–¥–µ—Å—å –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ —ç—Ç–æ–≥–æ –∂–µ –º–æ–¥—É–ª—è
            seconds,
            name="shutdown_timer",
            data=job_data
        )

        shutdown_time_str = (datetime.now() + timedelta(seconds=seconds)).strftime('%H:%M:%S')
        await update.message.reply_text(
            f'‚è∞ –í—ã–∫–ª—é—á–µ–Ω–∏–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞ {shutdown_time_str}\n'
            f'(—á–µ—Ä–µ–∑ {int(seconds//3600)} —á. {int((seconds%3600)//60)} –º–∏–Ω. {int(seconds%60)} —Å–µ–∫.)'
        )

    except ValueError as e:
        await update.message.reply_text(
            f'‚ùå {str(e)}\n\n'
            '–ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:\n'
            '‚Ä¢ /shutdown_timer 60 - —á–µ—Ä–µ–∑ 60 –º–∏–Ω—É—Ç\n'
            f'‚Ä¢ /shutdown_timer {datetime.now().strftime("%H:%M")} - –Ω–∞–ø—Ä–∏–º–µ—Ä, –≤ {datetime.now().strftime("%H:%M")} (–ø–æ —Ç–µ–∫—É—â–µ–º—É –≤—Ä–µ–º–µ–Ω–∏)'
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ç–∞–π–º–µ—Ä–∞: {e}")
        await update.message.reply_text(f'‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ç–∞–π–º–µ—Ä–∞: {e}')

@restricted
async def cancel_shutdown(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–º–µ–Ω–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –≤—ã–∫–ª—é—á–µ–Ω–∏—è"""
    if 'shutdown_timer' in context.user_data and context.user_data['shutdown_timer'] is not None:
        try:
            # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–º–µ–Ω—ã Job
            context.user_data['shutdown_timer'].remove()
            del context.user_data['shutdown_timer']

            if platform.system() == "Windows":
                try:
                    proc = await asyncio.create_subprocess_shell(
                        "shutdown /a",
                        stdout=subprocess.PIPE,
                        stderr=subprocess.PIPE,
                        shell=True
                    )
                    stdout, stderr = await proc.communicate()
                   
                    # –ò–°–ü–†–ê–í–õ–ï–ù–û: –î–µ–∫–æ–¥–∏—Ä—É–µ–º –≤—ã–≤–æ–¥ stderr —Å –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π cp866
                    decoded_stderr = stderr.decode('cp866', errors='replace')
                   
                    if proc.returncode != 0:
                        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã shutdown /a: {decoded_stderr}")
                except Exception as sub_e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ shutdown /a: {sub_e}")

            await update.message.reply_text('‚úÖ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –≤—ã–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ')
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ —Ç–∞–π–º–µ—Ä–∞: {e}")
            await update.message.reply_text(f'‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ: {e}')
    else:
        await update.message.reply_text('‚ÑπÔ∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–∞–π–º–µ—Ä–æ–≤ –≤—ã–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è –æ—Ç–º–µ–Ω—ã.')

async def shutdown_pc(context: ContextTypes.DEFAULT_TYPE):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–∫–ª—é—á–µ–Ω–∏—è –ü–ö, –≤—ã–∑—ã–≤–∞–µ–º–∞—è —Ç–∞–π–º–µ—Ä–æ–º –∏–ª–∏ –ø–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é"""
    chat_id = context.job.data.get('chat_id')
    message_id = context.job.data.get('message_id')
   
    try:
        if chat_id:
            if message_id:
                try:
                    await context.bot.edit_message_text(
                        chat_id=chat_id,
                        message_id=message_id,
                        text='üîå –í—ã–∫–ª—é—á–∞—é –∫–æ–º–ø—å—é—Ç–µ—Ä (—Ç–∞–π–º–µ—Ä)...'
                    )
                except Exception as e:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}. –û—Ç–ø—Ä–∞–≤–ª—è—é –Ω–æ–≤–æ–µ.")
                    await context.bot.send_message(chat_id=chat_id, text='üîå –í—ã–∫–ª—é—á–∞—é –∫–æ–º–ø—å—é—Ç–µ—Ä (—Ç–∞–π–º–µ—Ä)...')
            else:
                await context.bot.send_message(chat_id=chat_id, text='üîå –í—ã–∫–ª—é—á–∞—é –∫–æ–º–ø—å—é—Ç–µ—Ä (—Ç–∞–π–º–µ—Ä)...')
        else:
            logger.error("–ù–µ—Ç chat_id –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞ –≤ shutdown_pc.")

        if platform.system() == "Windows":
            subprocess.run(["shutdown", "/s", "/t", "0"])  # –†–ê–°–ö–û–ú–ú–ï–ù–¢–ò–†–û–í–ê–ù–û
            # logger.info("Windows: –ö–æ–º–∞–Ω–¥–∞ –Ω–∞ –≤—ã–∫–ª—é—á–µ–Ω–∏–µ –ü–ö –±—ã–ª–∞ –±—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–∞.") # –ú–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å
        else:
            subprocess.run(["shutdown", "-h", "now"])  # –†–ê–°–ö–û–ú–ú–ï–ù–¢–ò–†–û–í–ê–ù–û
            # logger.info("Linux/macOS: –ö–æ–º–∞–Ω–¥–∞ –Ω–∞ –≤—ã–∫–ª—é—á–µ–Ω–∏–µ –ü–ö –±—ã–ª–∞ –±—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–∞.") # –ú–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å
    except Exception as e:
        error_msg = f'‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∫–ª—é—á–µ–Ω–∏–∏: {e}'
        if chat_id:
            await context.bot.send_message(chat_id=chat_id, text=error_msg)
        else:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∫–ª—é—á–µ–Ω–∏–∏, –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")